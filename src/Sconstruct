import os

src_files = Glob('*.c')


header_files = Glob('*.h')

env = Environment(CC='avr-gcc',
                  CFLAGS=Split(''' -Wall
                                    -pedantic
                                    -Wextra
                                    -Wstrict-prototypes
                                    -fshort-enums
                                    -mmcu=atmega2560
                                    -DF_CPU=16000000
                                    -DDEBUG_OUTPUT
                                    -Os'''))

# User environment terminal may support features like colored output (e.g. warnings and errors)
env['ENV']['TERM'] = os.environ['TERM']

# Builder to format source code.
clang_format = env.Command('format_code', src_files + header_files,
                           'clang-format -i -style=Google $SOURCES')

baud_rate = ARGUMENTS.get('baud', 115200)

env.Append(CFLAGS=f'-DBAUD={baud_rate}')

env.Append(LINKFLAGS='-mmcu=atmega2560')

system_cpu_count = len(os.sched_getaffinity(0))
num_cpu = int(os.environ.get('NUM_CPU', system_cpu_count))
SetOption('num_jobs', num_cpu)

debug_mode = ARGUMENTS.get('debug', None)

if debug_mode:
    env.Append(CFLAGS='-g')
    env.Append(LINKFLAGS='-g')

simplos = env.Program(target='simplos.out', source=src_files)


Default(clang_format, simplos)
